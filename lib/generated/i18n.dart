import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get addExpense => "Add";
  String get appName => "FKB Flutter";
  String get apply => "Apply";
  String get cCashAdvance => "Cash advance form";
  String get cCashAdvanceSimpleName => "Cash advance";
  String get cContractDetail => "Contract details";
  String get cContractSign => "Contract form";
  String get cContractSignSimpleName => "Contract";
  String get cDailyApply => "Daily expense apply form";
  String get cDailyApplySimpleName => "Daily expense apply";
  String get cDailyReimbursement => "Daily expense reimbursement form";
  String get cDailyReimbursementSimpleName => "Daily reimbursement apply";
  String get cMyInvoice => "My invoice";
  String get cPayApply => "Payment apply form";
  String get cPayApplySimpleName => "Payment apply";
  String get cPayDetail => "Payment details";
  String get cPayDetailSimpleName => "Payment details";
  String get cPurchaseApply => "Purchase apply form";
  String get cPurchaseApplySimpleName => "Purchase apply";
  String get cPurchaseDetail => "Purchase items";
  String get cPurchaseDetailSimpleName => "Purchase items";
  String get cRepayment => "Repayment form";
  String get cRepaymentSimpleName => "Repayment";
  String get cSupplier => "Supplier";
  String get cSupplierSim => "Supplier";
  String get cTravelApply => "Travel apply form";
  String get cTravelApplySimpleName => "Travel apply";
  String get cTravelReimbursement => "Travel reimbursement form";
  String get cTravelReimbursementSimpleName => "Travel reimbursement";
  String get cTravelTrip => "Trip";
  String get forgotPassword => "Forgot password?";
  String get inputMobile => "Input mobile number";
  String get inputPassword => "Input password";
  String get loadMenuError => "Load menu error";
  String get loadTemplateFail => "Load template fail";
  String get login => "Login";
  String get loginError => "Login error";
  String get networkError => "Network error";
  String get noData => "No data, click to refresh";
  String get reimburse => "Reimburse";
  String get scan => "Scan";
  String get serverError => "Server error";
  String get submitted => "Submitted";
  String get todo => "Todo";
  String get unSubmitted => "UnSubmitted";
  String get useImmediately => "Use immediately";
  String get workbench => "Workbench";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get reimburse => "报销";
  @override
  String get cContractDetail => "合同明细";
  @override
  String get loadTemplateFail => "加载模板失败";
  @override
  String get loadMenuError => "加载菜单失败";
  @override
  String get addExpense => "记一笔";
  @override
  String get cTravelApply => "出差申请单";
  @override
  String get cMyInvoice => "我的发票";
  @override
  String get scan => "扫一扫";
  @override
  String get cPayDetail => "付款明细";
  @override
  String get cTravelTrip => "行程";
  @override
  String get login => "登录";
  @override
  String get forgotPassword => "登录密码忘记？";
  @override
  String get cPurchaseDetail => "采购明细";
  @override
  String get cContractSign => "合同签批单";
  @override
  String get cRepayment => "预支还款单";
  @override
  String get useImmediately => "立即体验";
  @override
  String get cRepaymentSimpleName => "预支还款";
  @override
  String get cPurchaseApply => "采购申请单";
  @override
  String get serverError => "服务器异常";
  @override
  String get workbench => "工作台";
  @override
  String get cPurchaseApplySimpleName => "采购申请";
  @override
  String get networkError => "网络服务异常";
  @override
  String get inputPassword => "请输入密码";
  @override
  String get cDailyReimbursement => "日常费用报销单";
  @override
  String get cPurchaseDetailSimpleName => "采购明细";
  @override
  String get cPayDetailSimpleName => "付款明细";
  @override
  String get cSupplier => "供应商管理";
  @override
  String get cTravelApplySimpleName => "出差申请";
  @override
  String get apply => "申请";
  @override
  String get appName => "费控宝Flutter";
  @override
  String get cTravelReimbursement => "出差费用报销单";
  @override
  String get cContractSignSimpleName => "合同签批";
  @override
  String get unSubmitted => "未提交";
  @override
  String get cDailyApplySimpleName => "日常申请";
  @override
  String get todo => "待办";
  @override
  String get submitted => "已提交";
  @override
  String get cTravelReimbursementSimpleName => "出差报销";
  @override
  String get cCashAdvance => "现金预支单";
  @override
  String get inputMobile => "请输入手机号";
  @override
  String get cCashAdvanceSimpleName => "现金预支";
  @override
  String get cDailyApply => "日常开支申请单";
  @override
  String get cSupplierSim => "供应商";
  @override
  String get loginError => "登录信息异常";
  @override
  String get cPayApplySimpleName => "付款申请";
  @override
  String get noData => "暂无数据，点击刷新";
  @override
  String get cPayApply => "付款申请单";
  @override
  String get cDailyReimbursementSimpleName => "日常报销";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
